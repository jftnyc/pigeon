// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone         String?
  address       String?
  birthday      DateTime?
  latitude      Float?
  longitude     Float?
  locationUpdatedAt DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  resetToken    String?
  resetTokenExpiry DateTime?

  // Availability
  availabilitySchedule AvailabilitySchedule?
  manualAvailability  ManualAvailability?

  // Relations
  accounts      Account[]
  sessions      Session[]
  sentConnections     Connection[] @relation("SentConnections")
  receivedConnections Connection[] @relation("ReceivedConnections")
  customFields  CustomField[]
  notifications Notification[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Connection {
  id          String   @id @default(cuid())
  senderId    String
  receiverId  String
  status      ConnectionStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sender      User     @relation("SentConnections", fields: [senderId], references: [id])
  receiver    User     @relation("ReceivedConnections", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
}

model AvailabilitySchedule {
  id        String   @id @default(cuid())
  userId    String   @unique
  monday    Json?    // Array of time slots
  tuesday   Json?
  wednesday Json?
  thursday  Json?
  friday    Json?
  saturday  Json?
  sunday    Json?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ManualAvailability {
  id        String   @id @default(cuid())
  userId    String   @unique
  isAvailable Boolean @default(false)
  expiresAt DateTime?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CustomField {
  id        String   @id @default(cuid())
  userId    String
  name      String
  type      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      NotificationType
  data      Json
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum NotificationType {
  FRIEND_REQUEST
  INFO_UPDATE
  AVAILABILITY_CHANGE
  LOCATION_UPDATE
} 